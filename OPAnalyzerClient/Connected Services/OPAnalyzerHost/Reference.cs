//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OPAnalyzerClient.OPAnalyzerHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OPAnalyzerHost.IAnalyzerService")]
    public interface IAnalyzerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/GetSupportedDataSources", ReplyAction="http://tempuri.org/IAnalyzerService/GetSupportedDataSourcesResponse")]
        string[] GetSupportedDataSources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/GetSupportedDataSources", ReplyAction="http://tempuri.org/IAnalyzerService/GetSupportedDataSourcesResponse")]
        System.Threading.Tasks.Task<string[]> GetSupportedDataSourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/GetSupportedAnalysisFlows", ReplyAction="http://tempuri.org/IAnalyzerService/GetSupportedAnalysisFlowsResponse")]
        System.Collections.Generic.Dictionary<long, string> GetSupportedAnalysisFlows();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/GetSupportedAnalysisFlows", ReplyAction="http://tempuri.org/IAnalyzerService/GetSupportedAnalysisFlowsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> GetSupportedAnalysisFlowsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/Analyze", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeResponse")]
        string[] Analyze(string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/Analyze", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeResponse")]
        System.Threading.Tasks.Task<string[]> AnalyzeAsync(string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/AnalyzeWithFlow", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeWithFlowResponse")]
        string[] AnalyzeWithFlow(string dataSourceName, long analysisFlowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/AnalyzeWithFlow", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeWithFlowResponse")]
        System.Threading.Tasks.Task<string[]> AnalyzeWithFlowAsync(string dataSourceName, long analysisFlowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/AnalyzeWithFlows", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeWithFlowsResponse")]
        string[] AnalyzeWithFlows(string dataSourceName, long[] analysisFlowIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnalyzerService/AnalyzeWithFlows", ReplyAction="http://tempuri.org/IAnalyzerService/AnalyzeWithFlowsResponse")]
        System.Threading.Tasks.Task<string[]> AnalyzeWithFlowsAsync(string dataSourceName, long[] analysisFlowIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnalyzerServiceChannel : OPAnalyzerClient.OPAnalyzerHost.IAnalyzerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnalyzerServiceClient : System.ServiceModel.ClientBase<OPAnalyzerClient.OPAnalyzerHost.IAnalyzerService>, OPAnalyzerClient.OPAnalyzerHost.IAnalyzerService {
        
        public AnalyzerServiceClient() {
        }
        
        public AnalyzerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnalyzerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnalyzerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnalyzerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetSupportedDataSources() {
            return base.Channel.GetSupportedDataSources();
        }
        
        public System.Threading.Tasks.Task<string[]> GetSupportedDataSourcesAsync() {
            return base.Channel.GetSupportedDataSourcesAsync();
        }
        
        public System.Collections.Generic.Dictionary<long, string> GetSupportedAnalysisFlows() {
            return base.Channel.GetSupportedAnalysisFlows();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> GetSupportedAnalysisFlowsAsync() {
            return base.Channel.GetSupportedAnalysisFlowsAsync();
        }
        
        public string[] Analyze(string dataSourceName) {
            return base.Channel.Analyze(dataSourceName);
        }
        
        public System.Threading.Tasks.Task<string[]> AnalyzeAsync(string dataSourceName) {
            return base.Channel.AnalyzeAsync(dataSourceName);
        }
        
        public string[] AnalyzeWithFlow(string dataSourceName, long analysisFlowId) {
            return base.Channel.AnalyzeWithFlow(dataSourceName, analysisFlowId);
        }
        
        public System.Threading.Tasks.Task<string[]> AnalyzeWithFlowAsync(string dataSourceName, long analysisFlowId) {
            return base.Channel.AnalyzeWithFlowAsync(dataSourceName, analysisFlowId);
        }
        
        public string[] AnalyzeWithFlows(string dataSourceName, long[] analysisFlowIds) {
            return base.Channel.AnalyzeWithFlows(dataSourceName, analysisFlowIds);
        }
        
        public System.Threading.Tasks.Task<string[]> AnalyzeWithFlowsAsync(string dataSourceName, long[] analysisFlowIds) {
            return base.Channel.AnalyzeWithFlowsAsync(dataSourceName, analysisFlowIds);
        }
    }
}
